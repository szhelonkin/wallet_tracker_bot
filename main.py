import asyncio
import logging
import os
from decimal import Decimal
import requests
from dotenv import load_dotenv
from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, ContextTypes
import locale

from db import init_db_sync, add_address, remove_address, list_addresses
from btc import get_balances_btc, fetch_balance_btc, satoshi_to_btc
from cg import get_prices

# ---------- –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ----------
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s ‚Äî %(message)s",
)
locale.setlocale(locale.LC_ALL, '')

COMMANDS = [
    BotCommand("add",       "–î–æ–±–∞–≤–∏—Ç—å BTC‚Äë–∞–¥—Ä–µ—Å"),
    BotCommand("remove",    "–£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å"),
    BotCommand("portfolio", "–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è"),
    BotCommand("balance",   "–ë–∞–ª–∞–Ω—Å –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞"),
    BotCommand("help",      "–°–ø—Ä–∞–≤–∫–∞"),
]

def format_num(num):
	return '{:,.0f}'.format(num).replace(',', ' ')

# ---------- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ----------
async def setup_commands(application: Application):
    """–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –ø—É–±–ª–∏–∫—É–µ–º –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    await application.bot.set_my_commands(COMMANDS)

    # (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤ –∫–ª–∏–µ–Ω—Ç–µ –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ ¬´–ú–µ–Ω—é¬ª
    from telegram import MenuButtonCommands
    await application.bot.set_chat_menu_button(menu_button=MenuButtonCommands())

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!\n"
        "/add <addr> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å\n"
        "/remove <addr> ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å\n"
        "/portfolio ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è\n"
        "–î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /balance <addr>."
    )

async def add_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add <btc‚Äë–∞–¥—Ä–µ—Å>")
        return
    addr = context.args[0]
    ok = await add_address(update.effective_user.id, addr)
    msg = "‚úÖ –ê–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω." if ok else "‚ö†Ô∏è –≠—Ç–æ—Ç –∞–¥—Ä–µ—Å —É–∂–µ –µ—Å—Ç—å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ."
    await update.message.reply_text(msg)

async def remove_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /remove <btc‚Äë–∞–¥—Ä–µ—Å>")
        return
    addr = context.args[0]
    ok = await remove_address(update.effective_user.id, addr)
    msg = "üóëÔ∏è –£–¥–∞–ª–∏–ª." if ok else "ü§∑ –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–≤–æ—ë–º —Å–ø–∏—Å–∫–µ."
    await update.message.reply_text(msg)

async def balance_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /balance <btc‚Äë–∞–¥—Ä–µ—Å>")
        return

    address = context.args[0]
    await update.message.reply_text("‚è≥ –°–º–æ—Ç—Ä—é‚Ä¶")
    try:
        satoshis = await asyncio.to_thread(fetch_balance_btc, address)
        btc_balnace = satoshi_to_btc(satoshis)
        await update.message.reply_text(
            f"–ë–∞–ª–∞–Ω—Å –∞–¥—Ä–µ—Å–∞ `{address}`:\n{btc_balnace:.4f} BTC",
            parse_mode="Markdown",
        )
    except requests.HTTPError as e:
        await update.message.reply_text(f"‚õîÔ∏è –û—à–∏–±–∫–∞ API: {e.response.status_code}")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ß—Ç–æ‚Äë—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}")

async def portfolio_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("‚è≥ –°—á–∏—Ç–∞—é –ø–æ—Ä—Ç—Ñ–µ–ª—å‚Ä¶")
    addrs = await list_addresses(update.effective_user.id)
    if not addrs:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–¥—Ä–µ—Å–æ–≤. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /add.")
        return

    balances = await get_balances_btc(addrs)
    lines = ["*üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å*"] 
    total_sat = 0
    for addr, bal in balances.items():
        if isinstance(bal, Exception):
            lines.append(f"‚ö†Ô∏è {addr[:10]}‚Ä¶ ‚Äî –æ—à–∏–±–∫–∞ API")
        else:
            total_sat += bal
            lines.append(f"`{addr[:10]}‚Ä¶` ‚Äî {satoshi_to_btc(bal):.4f} ‡∏ø")

    prices = get_prices("bitcoin", "usd,rub")
    total_btc = satoshi_to_btc(total_sat)
    total_usd = total_btc * Decimal(prices["bitcoin"]['usd'])
    total_rub = total_btc * Decimal(prices["bitcoin"]['rub'])

    lines.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    lines.append(f"*–ò—Ç–æ–≥–æ:*  {total_btc:.2f} ‡∏ø  {format_num(total_usd)} $  {format_num(total_rub)} ‚ÇΩ")

    await update.message.reply_text(
        "\n".join(lines), parse_mode="Markdown"
    )

# ---------- —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------
def main() -> None:
    # –æ–¥–∏–Ω —Ä–∞–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º (–∫–æ—Ä–æ—Ç–∫–æ–º) —Ü–∏–∫–ª–µ
    init_db_sync()

    application = Application.builder().token(TOKEN).post_init(setup_commands).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add", add_cmd))
    application.add_handler(CommandHandler("remove", remove_cmd))
    application.add_handler(CommandHandler("balance", balance_cmd))
    application.add_handler(CommandHandler("portfolio", portfolio_cmd))

    logging.info("Bot is polling‚Ä¶")
    application.run_polling()     # ‚Üê –ë–õ–û–ö–ò–†–£–ï–¢ –ø–æ—Ç–æ–∫ –¥–æ Ctrl‚ÄëC

if __name__ == "__main__":
    main()
